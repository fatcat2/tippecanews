{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","Typography","Paragraph","use_list","Text","get_list","App","state","current","handleClick","e","console","log","setState","key","style","border","title","subTitle","span","offset","level","size","dataSource","renderItem","item","Item","code","message","type","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWAIQA,EAA2BC,IAA3BD,MAAOE,EAAoBD,IAApBC,UAETC,GAF6BF,IAATG,KAET,CACf,qDACA,6CACA,iCACA,oBAGIC,EAAW,CACf,0EACA,uGACA,wFA+GaC,E,2MA3GbC,MAAQ,CACNC,QAAS,Q,EAGXC,YAAc,SAAAC,GACZC,QAAQC,IAAI,SAAUF,GACtB,EAAKG,SAAS,CACZL,QAASE,EAAEI,O,wEAOb,OACE,6BACE,kBAAC,IAAD,CACEC,MAAO,CACLC,OAAQ,gCAEVC,MAAM,cACNC,SAAS,uBAEX,6BACA,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACrB,kBAAC,IAAD,KACE,kBAACpB,EAAD,+BACA,kBAACE,EAAD,2FAGA,kBAAC,IAAD,MACA,kBAACF,EAAD,CAAOqB,MAAO,GAAd,6BAGA,kBAACnB,EAAD,4SAKA,kBAAC,IAAD,CACEoB,KAAK,QACLC,WAAYpB,EACZqB,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAYD,MAElC,6BACA,kBAACvB,EAAD,4EAGA,kBAACF,EAAD,CAAOqB,MAAO,GAAd,gBAGA,kBAACnB,EAAD,8TAKA,kBAACF,EAAD,CAAOqB,MAAO,GAAd,kBAGA,kBAACnB,EAAD,uEAEE,kBAAC,IAAD,CACAoB,KAAK,QACLC,WAAYlB,EACZmB,WAAY,SAAAC,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAYD,OAGlC,kBAACzB,EAAD,CAAOqB,MAAO,GAAd,iCAGA,kBAACnB,EAAD,CAAWyB,MAAM,GAAjB,uBAGA,kBAACzB,EAAD,CAAWyB,MAAM,GAAjB,wBAGA,kBAACzB,EAAD,qSAKA,kBAAC,IAAD,CAAO0B,QAAQ,8GAA8GC,KAAK,YAClI,kBAAC7B,EAAD,CAAOqB,MAAO,GAAd,sBAGA,kBAACnB,EAAD,2bAMA,kBAAC,IAAD,MACA,kBAACA,EAAD,qCAC+B,uBAAG4B,KAAK,4BAAR,iBAD/B,0CAC0H,uBAAGA,KAAK,+BAAR,wBAD1H,uC,GA/FEC,IAAMC,WCPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e132b337.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { PageHeader, Row, Col, Alert } from 'antd';\nimport { Typography, Divider, List } from 'antd';\nconst { Title, Paragraph, Text } = Typography;\n\nconst use_list = [\n  \"Getting Purdue News Slack releases in #tippecanews\",\n  \"Getting CMS, TCMS and TownNews email links\",\n  \"Searching the Purdue Directory\",\n  \"Getting bylines\"\n]\n\nconst get_list = [\n  \"/cms - Gives the link to CMS (the online system, can use from anywhere)\",\n  \"/tcms - Gives the link to TCMS (the local print system, can only use on Newsroom wifi or on the Macs\",\n  \"/email - Gives the link to the email because let's be real - who can remember it lol\"\n]\n\nclass App extends React.Component {\n  state = {\n    current: 'docs',\n  };\n\n  handleClick = e => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  \n\n  render() {\n    return (\n      <div>\n        <PageHeader\n          style={{\n            border: '1px solid rgb(235, 237, 240)',\n          }}\n          title=\"Tippecanews\"\n          subTitle=\"HOW TO USE MY BABY\"\n        />\n        <br />\n        <div>\n          <Row>\n            <Col span={12} offset={6}>\n              <Typography>\n                <Title>Welcome to Tippecanews</Title>\n                <Paragraph>\n                  You're here because you want to unlock the full potential of my baby, Tippecanews.\n                </Paragraph>\n                <Divider />\n                <Title level={3}>\n                  What does Tippecanews do?\n                </Title>\n                <Paragraph>\n                  Well that's a very good question! Tippecanews originally started as a Slack app to get the latest press releases,\n                  but its evolved into something a bit more. With Tippecanews, you can search the Purdue Directory, get bylines, get \n                  the CMS links and more! Here's a full list of functionalities:\n                </Paragraph>\n                <List\n                  size=\"large\"\n                  dataSource={use_list}\n                  renderItem={item => <List.Item>{item}</List.Item>}\n                />\n                <br />\n                <Paragraph>\n                  Let's jump into how to make the most out of this wonderful program!\n                </Paragraph>\n                <Title level={3}>\n                  #tippecanews\n                </Title>\n                <Paragraph>\n                  Tippecanews, as its original intended purpose, is basically an RSS bot for Slack. So here there's not much to do except\n                  watch. Well, what data does Tippecanews spit into the channel? We've got your press releases and PNG data thus far.\n                  We used to have tweets, but it took up way too much space in the channel. \n                </Paragraph>\n                <Title level={3}>\n                  Getting links!\n                </Title>\n                <Paragraph>\n                  Type in the following slash commands to get the listed results.\n                  <List\n                  size=\"large\"\n                  dataSource={get_list}\n                  renderItem={item => <List.Item>{item}</List.Item>}\n                />\n                </Paragraph>\n                <Title level={3}>\n                  Search through the directory!\n                </Title>\n                <Paragraph code={true}>\n                  /directory [ name ]\n                </Paragraph>\n                <Paragraph code={true}>\n                 /directory ryan chen\n                </Paragraph>\n                <Paragraph>\n                  One new feature that I've added in is directory search. While the Purdue Directory is pretty accessible online,\n                  wouldn't it be awesome to search in the directory from the comfort of Slack??? Type in /directory and the name\n                  of the person you're searching for and get a list of results.\n                </Paragraph>\n                <Alert message=\"Note: if you search for a common name like 'Joe,' it will come up as having no results. Please be specific.\" type=\"warning\" />\n                <Title level={3}>\n                  Get the bylines!!!\n                </Title>\n                <Paragraph>\n                  Maybe you're lazy. Maybe you're pressed for time. Either way, you need your bylines done now and fast. So what do you do?\n                  You type in /bylines into any Slack channel to get a message only you can see with all the bylines from the current pay period.\n                  Something to note is that if it's the 17th or 2nd of the month and no articles have been posted, it will show up as no articles\n                  for the pay period because there are no articles lulzzzz\n                </Paragraph>\n                <Divider />\n                <Paragraph>\n                  Tippecanews is maintained by <a href=\"twitter.com/ryanjengchen\">@ryanjengchen</a>. Find him on Twitter, or email him at <a href=\"mailto:ryanjchen2@gmail.com\">ryanjchen2@gmail.com</a>\n                  if you have any questions.\n                </Paragraph>\n              </Typography>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}